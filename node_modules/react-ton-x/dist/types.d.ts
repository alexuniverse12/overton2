import { Address } from 'ton';
import { TonhubLocalTransactionResponse, TonhubSignResponse, TonhubTransactionResponse, TonhubWalletConfig } from 'ton-x';
import { TonhubLocalConfig, TonhubLocalConnector, TonhubLocalSignResponse } from 'ton-x/dist/connector/TonhubLocalConnector';
export declare type TransactionRequest = {
    to: string;
    value: string;
    stateInit?: string | null | undefined;
    text?: string | null | undefined;
    payload?: string | null | undefined;
};
declare type TransactionResponse = TonhubLocalTransactionResponse | TonhubTransactionResponse;
export declare type SignRequest = {
    text?: string | null | undefined;
    payload?: string | null | undefined;
};
export declare type SignResponse = TonhubLocalSignResponse | TonhubSignResponse;
export declare type TonhubApi = {
    requestTransaction: (request: TransactionRequest) => Promise<TransactionResponse>;
    requestSign: (request: SignRequest) => Promise<SignResponse>;
    revoke: () => void;
};
export declare type RemoteConnectState = {
    type: 'initing';
} | {
    type: 'pending';
    session: string;
    link: string;
    seed: string;
} | {
    type: 'online';
    session: string;
    seed: string;
    walletConfig: TonhubWalletConfig;
    address: Address;
};
export declare type LocalConnectState = {
    type: 'online';
    walletConfig: TonhubLocalConfig;
    address: Address;
};
export declare type ConnectState = RemoteConnectState | LocalConnectState;
export declare type TonhubConnectorNetwork = TonhubLocalConnector['network'];
export {};
