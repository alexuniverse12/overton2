"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TonhubConnectProvider = exports.useTonhubConnect = void 0;
const React = __importStar(require("react"));
const ton_x_1 = require("ton-x");
const useLocalConnector_1 = require("./useLocalConnector");
const useRemoteConnector_1 = require("./useRemoteConnector");
const TonhubConnectContext = React.createContext({
    state: { type: 'initing' },
    api: {
        requestSign: () => { throw new Error('Cannot call "requestSign" without context'); },
        requestTransaction: () => { throw new Error('Cannot call "requestTransaction" without context'); },
        revoke: () => { throw new Error('Cannot call "revoke" without context'); },
    },
    connector: 'remote'
});
function useTonhubConnect() {
    return React.useContext(TonhubConnectContext);
}
exports.useTonhubConnect = useTonhubConnect;
exports.TonhubConnectProvider = React.memo(({ children, network, url, name, connectionState, setConnectionState, debug }) => {
    const localAvailable = ton_x_1.TonhubLocalConnector.isAvailable();
    // enable local if available, else enable remote
    const local = (0, useLocalConnector_1.useLocalConnector)(network, localAvailable);
    const remote = (0, useRemoteConnector_1.useRemoteConnector)({
        network,
        url,
        name,
        connectionState,
        setConnectionState,
        debug: !!debug
    }, !localAvailable);
    // select working connector
    const { state, api } = localAvailable ? local : remote;
    if (debug)
        console.log(localAvailable ? '[tonhub] using local connector' : '[tonhub] using remote connector');
    return (React.createElement(TonhubConnectContext.Provider, { value: { state, api, connector: localAvailable ? 'local' : 'remote' } }, children));
});
